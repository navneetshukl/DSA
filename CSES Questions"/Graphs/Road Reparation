// Problem Link - https://cses.fi/problemset/task/1675
/* By Navneet Shukla */
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
#define ll 				long long int
#define ld				long double
#define mod             1000000007
#define inf             1e18
#define endl			"\n"
#define pb 				emplace_back
#define vi              vector<ll>
#define vs				vector<string>
#define pii             pair<ll,ll>
#define ump				unordered_map
//#define mp 				map
#define pq_max          priority_queue<ll>
#define pq_min          priority_queue<ll,vi,greater<ll> >
#define ff 				first
#define ss 				second
#define mid(l,r)        (l+(r-l)/2)
#define loop(i,a,b) 	for(int i=(a);i<=(b);i++)
#define looprev(i,a,b) 	for(int i=(a);i>=(b);i--)
#define log(args...) 	{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#define logarr(arr,a,b)	for(int z=(a);z<=(b);z++) cout<<(arr[z])<<" ";cout<<endl;	
#define token(str,ch)	(std::istringstream var((str)); vs v; string t; while(getline((var), t, (ch))) {v.pb(t);} return v;)
vs tokenizer(string str,char ch) {std::istringstream var((str)); vs v; string t; while(getline((var), t, (ch))) {v.pb(t);} return v;}


void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cout << *it << " = " << a << endl;
	err(++it, args...);
}
//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;

void file_i_o()
{
    ios_base::sync_with_stdio(0); 
    cin.tie(0); 
    cout.tie(0);
	#ifndef ONLINE_JUDGE
	    freopen("input.txt", "r", stdin);
	    freopen("output.txt", "w", stdout);
	#endif
}
ll modularExponentiation(ll x,ll n,ll M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2,M);
    else                             //n is odd
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;

}
map<int,list<int>>mp;
map<int,bool>visited;
void join(int x,int y)
{
	mp[x].pb(y);
	mp[y].pb(x);
}
ll find(ll i,ll parent[])
{
	if(parent[i]==-1) return i;
	else return parent[i]=find(parent[i],parent);
}
void unite(ll a,ll b,ll parent[])
{
	int x=find(a,parent);
	int y=find(b,parent);
	if(x!=y)
	{
		parent[y]=x;
	}
}
void dfs(int src)
{
	visited[src]=true;
	for(auto i:mp[src])
	{
		if(!visited[i])
		{
			dfs(i);
		}
	}
}
int main(int argc, char const *argv[]) {
	file_i_o();
	ll n,m,s=0;
	cin>>n>>m;
	ll parent[n+1];
	loop(i,0,n)
	{
		parent[i]=-1;
	}
	vector<vector<ll>>v(m);
	for(int i=0;i<m;i++)
	{
		ll x,y,w;
		cin>>x>>y>>w;
		join(x,y);
		v[i]={w,x,y};
	}
	int c=0;
	sort(v.begin(),v.end());
	loop(i,0,m-1)
	{
		ll x=v[i][1];
		ll y=v[i][2];
		ll w=v[i][0];
		ll s1=find(x,parent);
		ll s2=find(y,parent);
		if(s1!=s2)
		{
			
			unite(x,y,parent);
			s+=w;
		}
	}
	loop(i,1,n)
	{
		visited[i]=false;
	}
	loop(i,1,n)
	{
		if(!visited[i])
		{
			c++;
			dfs(i);
		}
	}
	if(c!=1) cout<<"IMPOSSIBLE"<<endl;
	else
	cout<<s<<endl;
	return 0;
}


-------------------------------------------------------------------------------------:NOTE:------------------------------------------------------------------------------------
In this question i have used the concept of minimum spanning tree.The algorithm which i have used in Krushkal's Algorithm. For checking the "IMPOSSIBLE" condition i have counted
the number of connected componet in the graph.For finding the number of connected component in the graph I have used the DFS algorithm.

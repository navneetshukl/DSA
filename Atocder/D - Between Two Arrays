// Problem Link - https://atcoder.jp/contests/abc222/tasks/abc222_d
/* By Navneet Shukla*/
#include<bits/stdc++.h>
//#include<ext/pb_ds/assoc_container.hpp>
//using namespace __gnu_pbds;
using namespace std;
#define ll 				long long int
#define ld				long double
#define mod             998244353
#define inf             1e18
#define endl			"\n"
#define pb 				emplace_back
#define vi              vector<ll>
#define vs				vector<string>
#define pii             pair<ll,ll>
#define ump				unordered_map
#define mpa 				make_pair
#define pq_max          priority_queue<ll>
#define pq_min          priority_queue<ll,vi,greater<ll> >
#define ff 				first
#define ss 				second
#define mid(l,r)        (l+(r-l)/2)
#define loop(i,a,b) 	for(int i=(a);i<=(b);i++)
#define looprev(i,a,b) 	for(int i=(a);i>=(b);i--)
#define log(args...) 	{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
#define logarr(arr,a,b)	for(int z=(a);z<=(b);z++) cout<<(arr[z])<<" ";cout<<endl;	
#define token(str,ch)	(std::istringstream var((str)); vs v; string t; while(getline((var), t, (ch))) {v.pb(t);} return v;)
vs tokenizer(string str,char ch) {std::istringstream var((str)); vs v; string t; while(getline((var), t, (ch))) {v.pb(t);} return v;}


void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
	cout << *it << " = " << a << endl;
	err(++it, args...);
}
//typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds;

void file_i_o()
{
    ios_base::sync_with_stdio(0); 
    cin.tie(0); 
    cout.tie(0);
	#ifndef ONLINE_JUDGE
	    freopen("input.txt", "r", stdin);
	    freopen("output.txt", "w", stdout);
	#endif
}

int modularExponentiation(int x,int n,int M)
{
    if(n==0)
        return 1;
    else if(n%2 == 0)        //n is even
        return modularExponentiation((x*x)%M,n/2,M);
    else                             //n is odd
        return (x*modularExponentiation((x*x)%M,(n-1)/2,M))%M;

}

int main(int argc, char const *argv[]) {
	file_i_o();
	int n;
	cin>>n;
	int a[n],b[n];
	loop(i,0,n-1) cin>>a[i];
	loop(i,0,n-1) cin>>b[i];
	int dp[n][3001]={0};
	for(int i=a[0];i<=b[0];i++) dp[0][i]=1;
	for(int i=1;i<n;i++){
		ll sum=0;
		for(int j=0;j<=3000;j++){
			sum=(sum%mod+dp[i-1][j]%mod)%mod;
			if(j>=a[i] and j<=b[i])
			dp[i][j]=sum;
		}
	}
	ll ans=0;
	loop(i,0,3000){
		ans=(ans%mod+dp[n-1][i]%mod)%mod;
	}
	cout<<ans<<endl;
	return 0;
}








/////////////////////////////////////////////////////////////////



Let us first consider a naive DP (Dynamic Programming). Define a DP table

dpi,j​ by

dpi,j​:= the number of prefixes of lengths i of such sequences such that

    ci​=j.

Then, focusing on the

i-th element,

    if 

    ai​≤j≤bi​, it is accepted as long as it is is greater than or equal to the previous element
    otherwise, it is unaccepted.

Thus, we have the following transitions.
(For convenience, we regard that the
0-th element of C is

0, in order to reduce case divisions.)

dpi,j​=⎩⎪⎪⎨⎪⎪⎧​1∑0≤k≤j​dpi−1,k​0​i=0∧j=0i≥1∧ai​≤j≤bi​otherwise.​

This expression can be computed in the increasing order of
i. Also, the answer is expressed as the sum of all possible prefixes of lengths

N, that is,

dpN,0​+dpN,1​+⋯+dpN,M​,

where

M:=max(max(A),max(B)).
Therefore, we have now found an algorithm of finding the answer in a polynomial time. The DP defined by the transitions above has

O(NM) number of elements that are to updated, and

    O(M) time complexity required to compute each element,

so the total time complexity is

O(NM2). However, this leads to TLE (Time Limit Exceeded), so we somehow want to reduce the complexity of the DP.

Now, notice that the transition has a form of
∑0≤k≤j​dpi−1,k​, which enables us to manage cumulative sums on DP. Let us define a table of cumulative sums of DP,

Ri,j​, as

    Ri,j​:=∑0≤k≤j​dpi,k​.

Then the DP mentioned above is expressed as

Ri,j​=⎩⎪⎪⎨⎪⎪⎧​1Ri,j−1​+Ri−1,j​Ri,j−1​​i=0∧j=0i≥1∧ai​≤j≤bi​otherwise,​

so the time complexity required to compute each element is reduced to
O(1). By making use of this expression to compute DP, the problem has been solved in a total of O(NM) time.
